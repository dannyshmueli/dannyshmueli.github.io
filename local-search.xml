<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Install n8n on Oracle Free Tier</title>
    <link href="/2025/06/12/Install-n8n-on-Oracle-Free-Tier/"/>
    <url>/2025/06/12/Install-n8n-on-Oracle-Free-Tier/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Note:</strong> This guide is based on and inspired by <a href="https://medium.com/@dcheng857/self-hosted-n8n-with-oracle-cloud-7825e8aa62d7">Self-hosted n8n with Oracle Cloud</a> by @dcheng857 on Medium. Please check out the original article for more details and credit.</p></blockquote><h1 id="Setting-up-Oracle-Cloud-Free-Tier-and-User"><a href="#Setting-up-Oracle-Cloud-Free-Tier-and-User" class="headerlink" title="Setting up Oracle Cloud Free Tier and User"></a>Setting up Oracle Cloud Free Tier and User</h1><p>Before installing n8n, you need to set up your Oracle Cloud Free Tier account and create a VM instance:</p><h2 id="1-Sign-Up-for-Oracle-Cloud-Free-Tier"><a href="#1-Sign-Up-for-Oracle-Cloud-Free-Tier" class="headerlink" title="1. Sign Up for Oracle Cloud Free Tier"></a>1. Sign Up for Oracle Cloud Free Tier</h2><ul><li>Go to <a href="https://www.oracle.com/cloud/free/">Oracle Cloud Free Tier</a> and sign up for a free account.</li><li>Complete the registration process and verify your email and payment method (no charges for Free Tier usage).</li></ul><h2 id="2-Create-a-Virtual-Machine-VM-Instance"><a href="#2-Create-a-Virtual-Machine-VM-Instance" class="headerlink" title="2. Create a Virtual Machine (VM) Instance"></a>2. Create a Virtual Machine (VM) Instance</h2><ul><li>Log in to the <a href="https://cloud.oracle.com/">Oracle Cloud Console</a>.</li><li>Navigate to <strong>Compute &gt; Instances</strong> and click <strong>Create Instance</strong>.</li><li>Enter a name for your instance.</li><li>Choose the <strong>Always Free-eligible</strong> shape (e.g., “VM.Standard.E2.1.Micro”).</li><li>Add your SSH public key (generate one with <code>ssh-keygen</code> if you don’t have one).</li><li>Click <strong>Create</strong> and wait for the instance to be provisioned.</li></ul><h3 id="2-1-Open-Ingress-Rules-for-Ports-80-and-443"><a href="#2-1-Open-Ingress-Rules-for-Ports-80-and-443" class="headerlink" title="2.1. Open Ingress Rules for Ports 80 and 443"></a>2.1. Open Ingress Rules for Ports 80 and 443</h3><p>To allow web traffic to your n8n instance, you need to open ports 80 (HTTP) and 443 (HTTPS) in your Oracle Cloud network settings:</p><ul><li>In the Oracle Cloud Console, go to <strong>Networking &gt; Virtual Cloud Networks</strong> and select the VCN your instance is using.</li><li>Click on the <strong>Subnet</strong> your instance is attached to.</li><li>Under <strong>Security Lists</strong>, click the security list associated with your subnet.</li><li>Click <strong>Add Ingress Rules</strong> and add two rules:<ul><li><strong>Source CIDR:</strong> 0.0.0.0&#x2F;0</li><li><strong>IP Protocol:</strong> TCP</li><li><strong>Destination Port Range:</strong> 80 (for HTTP)</li><li>Repeat for port 443 (for HTTPS)</li></ul></li><li>Save the rules. Your instance will now accept incoming traffic on ports 80 and 443.</li></ul><h2 id="3-Connect-to-Your-VM"><a href="#3-Connect-to-Your-VM" class="headerlink" title="3. Connect to Your VM"></a>3. Connect to Your VM</h2><ul><li>Find the public IP address of your instance in the Oracle Cloud Console.</li><li>Connect via SSH:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -i /path/to/your/private/key opc@&lt;your_public_ip&gt;<br></code></pre></td></tr></table></figure><ul><li>The default user is <code>opc</code>. You can create a new user if desired:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> adduser yourusername<br><span class="hljs-built_in">sudo</span> usermod -aG <span class="hljs-built_in">sudo</span> yourusername<br></code></pre></td></tr></table></figure><ul><li>(Optional) Copy your SSH key to the new user:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /home/yourusername/.ssh<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> ~/.ssh/authorized_keys /home/yourusername/.ssh/<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R yourusername:yourusername /home/yourusername/.ssh<br></code></pre></td></tr></table></figure><hr><h1 id="Setting-up-n8n-with-Docker-NGINX-and-SSL-on-Ubuntu"><a href="#Setting-up-n8n-with-Docker-NGINX-and-SSL-on-Ubuntu" class="headerlink" title="Setting up n8n with Docker, NGINX, and SSL on Ubuntu"></a>Setting up n8n with Docker, NGINX, and SSL on Ubuntu</h1><p>This guide walks through setting up a production-ready n8n instance with Docker, NGINX as a reverse proxy, and SSL certificates using Let’s Encrypt. We’ll also configure some additional features like the Brave Search API integration.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul><li>Ubuntu 20.04 LTS server</li><li>A domain pointed to your server (in this guide we use n8n.dannyshmueli.com)</li><li>Basic command line knowledge</li></ul><h2 id="Step-1-Install-Docker"><a href="#Step-1-Install-Docker" class="headerlink" title="Step 1: Install Docker"></a>Step 1: Install Docker</h2><p>First, let’s install Docker which we’ll use to run n8n:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install docker.io<br><span class="hljs-built_in">sudo</span> systemctl start docker<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><h2 id="Step-2-Install-and-Configure-NGINX"><a href="#Step-2-Install-and-Configure-NGINX" class="headerlink" title="Step 2: Install and Configure NGINX"></a>Step 2: Install and Configure NGINX</h2><p>Install NGINX to act as our reverse proxy:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update &amp;&amp; <span class="hljs-built_in">sudo</span> apt install -y nginx<br></code></pre></td></tr></table></figure><p>Create an NGINX configuration file for n8n:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/nginx/sites-available/n8n.conf &gt;/dev/null &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br>server &#123;<br>    listen 80;<br>    server_name n8n.dannyshmueli.com;<br><br>    location / &#123;<br>        proxy_pass         http://127.0.0.1:5678;<br>        proxy_http_version 1.1;<br>        proxy_set_header   Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>        proxy_set_header   Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>        chunked_transfer_encoding off;<br>        proxy_buffering off;<br>        proxy_cache off;<br>    &#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>Enable the configuration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/n8n.conf /etc/nginx/sites-enabled/<br><span class="hljs-built_in">sudo</span> nginx -t &amp;&amp; <span class="hljs-built_in">sudo</span> systemctl reload nginx<br></code></pre></td></tr></table></figure><h2 id="Step-3-Configure-Firewall"><a href="#Step-3-Configure-Firewall" class="headerlink" title="Step 3: Configure Firewall"></a>Step 3: Configure Firewall</h2><p>Allow HTTP and HTTPS traffic:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> iptables -I INPUT -p tcp --dport 80  -j ACCEPT<br><span class="hljs-built_in">sudo</span> iptables -I INPUT -p tcp --dport 443 -j ACCEPT<br></code></pre></td></tr></table></figure><h2 id="Step-4-Set-Up-SSL-with-Let’s-Encrypt"><a href="#Step-4-Set-Up-SSL-with-Let’s-Encrypt" class="headerlink" title="Step 4: Set Up SSL with Let’s Encrypt"></a>Step 4: Set Up SSL with Let’s Encrypt</h2><p>Install Certbot and get SSL certificates:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install -y certbot python3-certbot-nginx<br><span class="hljs-built_in">sudo</span> certbot --nginx -d n8n.dannyshmueli.com<br></code></pre></td></tr></table></figure><h2 id="Step-5-Run-n8n-with-Docker"><a href="#Step-5-Run-n8n-with-Docker" class="headerlink" title="Step 5: Run n8n with Docker"></a>Step 5: Run n8n with Docker</h2><p>Now we’ll run n8n with proper configuration including authentication and webhook support:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Create n8n data directory and set permissions</span><br><span class="hljs-built_in">mkdir</span> -p ~/.n8n<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R 1000:1000 ~/.n8n<br><br><span class="hljs-comment"># Run n8n container</span><br><span class="hljs-built_in">sudo</span> docker run -d --name n8n \<br>  -p 5678:5678 \<br>  -v /home/ubuntu/.n8n:/home/node/.n8n \<br>  -e N8N_HOST=<span class="hljs-string">&quot;n8n.dannyshmueli.com&quot;</span> \<br>  -e WEBHOOK_URL=<span class="hljs-string">&quot;https://n8n.dannyshmueli.com/&quot;</span> \<br>  -e N8N_SOCKET_IO_URL=<span class="hljs-string">&quot;wss://n8n.dannyshmueli.com/rest/push&quot;</span> \<br>  -e N8N_BASIC_AUTH_USER=<span class="hljs-string">&quot;your-email@example.com&quot;</span> \<br>  -e N8N_BASIC_AUTH_PASSWORD=<span class="hljs-string">&quot;your-strong-password&quot;</span> \<br>  --restart unless-stopped \<br>  n8nio/n8n<br></code></pre></td></tr></table></figure><h2 id="Step-6-Additional-Configuration-Brave-Search-API-Integration"><a href="#Step-6-Additional-Configuration-Brave-Search-API-Integration" class="headerlink" title="Step 6: Additional Configuration - Brave Search API Integration"></a>Step 6: Additional Configuration - Brave Search API Integration</h2><p>If you’re planning to use the Brave Search API with n8n, you can add the API key to the Docker configuration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker stop n8n &amp;&amp; <span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">rm</span> n8n<br><br><span class="hljs-built_in">sudo</span> docker run -d --name n8n \<br>  -p 5678:5678 \<br>  -v /home/ubuntu/.n8n:/home/node/.n8n \<br>  -e N8N_HOST=<span class="hljs-string">&quot;n8n.dannyshmueli.com&quot;</span> \<br>  -e WEBHOOK_URL=<span class="hljs-string">&quot;https://n8n.dannyshmueli.com/&quot;</span> \<br>  -e N8N_SOCKET_IO_URL=<span class="hljs-string">&quot;wss://n8n.dannyshmueli.com/rest/push&quot;</span> \<br>  -e N8N_BASIC_AUTH_USER=<span class="hljs-string">&quot;your-email@example.com&quot;</span> \<br>  -e N8N_BASIC_AUTH_PASSWORD=<span class="hljs-string">&quot;your-strong-password&quot;</span> \<br>  -e BRAVE_API_KEY=<span class="hljs-string">&quot;your-brave-api-key&quot;</span> \<br>  --restart unless-stopped \<br>  n8nio/n8n<br></code></pre></td></tr></table></figure><h2 id="Maintenance-and-Troubleshooting"><a href="#Maintenance-and-Troubleshooting" class="headerlink" title="Maintenance and Troubleshooting"></a>Maintenance and Troubleshooting</h2><h3 id="Viewing-Logs"><a href="#Viewing-Logs" class="headerlink" title="Viewing Logs"></a>Viewing Logs</h3><p>To check n8n logs:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker logs n8n<br></code></pre></td></tr></table></figure><h3 id="Restarting-n8n"><a href="#Restarting-n8n" class="headerlink" title="Restarting n8n"></a>Restarting n8n</h3><p>To restart the n8n container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker restart n8n<br></code></pre></td></tr></table></figure><h3 id="Updating-n8n"><a href="#Updating-n8n" class="headerlink" title="Updating n8n"></a>Updating n8n</h3><p>To update to the latest version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker stop n8n<br><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">rm</span> n8n<br><span class="hljs-comment"># Then run the docker run command again with the latest image</span><br></code></pre></td></tr></table></figure><h2 id="Security-Considerations"><a href="#Security-Considerations" class="headerlink" title="Security Considerations"></a>Security Considerations</h2><ol><li>Always use strong passwords for n8n authentication</li><li>Keep your system and Docker updated</li><li>Regularly backup your ~&#x2F;.n8n directory</li><li>Use HTTPS only (configured through NGINX and Let’s Encrypt)</li></ol><h2 id="Common-Issues-and-Solutions"><a href="#Common-Issues-and-Solutions" class="headerlink" title="Common Issues and Solutions"></a>Common Issues and Solutions</h2><h3 id="Permission-Issues"><a href="#Permission-Issues" class="headerlink" title="Permission Issues"></a>Permission Issues</h3><p>If you encounter permission issues with the n8n directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R 1000:1000 /home/ubuntu/.n8n<br></code></pre></td></tr></table></figure><h3 id="WebSocket-Connection-Issues"><a href="#WebSocket-Connection-Issues" class="headerlink" title="WebSocket Connection Issues"></a>WebSocket Connection Issues</h3><p>If you have issues with WebSocket connections, ensure your NGINX configuration includes the proper WebSocket headers (as shown in the NGINX configuration above).</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You now have a production-ready n8n instance running with:</p><ul><li>HTTPS encryption</li><li>Basic authentication</li><li>Webhook support</li><li>WebSocket support</li><li>Automatic container restart</li><li>Brave Search API integration</li></ul><p>Remember to regularly backup your data and keep your system updated for security and stability.</p>]]></content>
    
    
    <categories>
      
      <category>cloud</category>
      
      <category>oracle-cloud</category>
      
      <category>self-hosting</category>
      
      <category>n8n</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>I Wrote My First Chrome Extension Without a Single Line of Code</title>
    <link href="/2023/04/03/First-Chrome-Extension-Without-a-Single-Line-of-Code/"/>
    <url>/2023/04/03/First-Chrome-Extension-Without-a-Single-Line-of-Code/</url>
    
    <content type="html"><![CDATA[<p>A colleague recently asked me if I knew of a QA tool that could check whether a coordinate was within a polygon. I replied that I didn’t, but suggested we try to build a tool like that with ChatGPT.</p><p>In this blog post, I will detail how I built a Chrome extension using ChatGPT <strong>without writing a single line of code</strong>, only following instructions and copy-pasting, despite having no prior experience in creating a Chrome app.</p><span id="more"></span><p>👉 <strong>Read the full ChatGPT transcript</strong> <a href="https://sharegpt.com/c/KTIUmFy">here</a><br>👉 <strong>Install from the Chrome Web Store:</strong> <a href="https://chrome.google.com/webstore/detail/polygon-checker/ddapaifbpicpmfldajmahofeeppkbdkh">Polygon Checker</a><br>👉 <strong>Source on GitHub:</strong> <a href="https://github.com/dannyshmueli/polygon-checker">github.com&#x2F;dannyshmueli&#x2F;polygon-checker</a></p><p><img src="/img/polygon-checker/polygon_checker_screenshot.png" alt="Polygon Checker screenshot"></p><h2 id="The-Idea"><a href="#The-Idea" class="headerlink" title="The Idea"></a>The Idea</h2><p>The goal was to build a Chrome extension that could take <strong>a list of coordinates describing a polygon</strong> and <strong>a single map coordinate</strong> as input, then output whether the single coordinate lies <em>inside</em> the polygon.</p><h2 id="The-Process"><a href="#The-Process" class="headerlink" title="The Process"></a>The Process</h2><p>I began by explaining my idea to ChatGPT 3.5. The model understood the requirements and produced everything I needed:</p><ol><li>A <code>manifest.json</code> file.</li><li>A <code>popup.html</code> UI.</li><li>A JavaScript file with the point-in-polygon logic.</li><li>Step-by-step instructions for loading and testing the extension in Chrome.</li></ol><p>ChatGPT even helped me debug along the way – for example, fixing an issue where the result disappeared too quickly after display.</p><p><img src="/img/polygon-checker/improving_the_polygon_input.png" alt="Improving the polygon input"></p><p>The first version’s UI wasn’t ideal (the textbox was <em>tiny</em>), so I asked ChatGPT to enlarge it and polish the styling. After a few iterations the popup looked and felt great.</p><p>I also noticed the generated <code>manifest.json</code> listed unnecessary permissions. After asking “Why do we need these?” ChatGPT agreed they could be removed and produced a leaner version:</p><p><img src="/img/polygon-checker/removing_permission.png" alt="Removing unneeded permission"></p><p>Finally, ChatGPT wrote a perfectly-serviceable <code>README.md</code>, which I committed as-is.</p><h2 id="Reflections-on-AI-Collaboration"><a href="#Reflections-on-AI-Collaboration" class="headerlink" title="Reflections on AI Collaboration"></a>Reflections on AI Collaboration</h2><p>Working closely with ChatGPT offered a unique perspective on what AI collaboration can look like in product management and software development.</p><h3 id="Accelerating-development"><a href="#Accelerating-development" class="headerlink" title="Accelerating development"></a>Accelerating development</h3><p>The pace was remarkable. What would normally require hours of searching and trial-and-error took minutes with concise prompts and copy-paste.</p><h3 id="Bridging-the-knowledge-gap"><a href="#Bridging-the-knowledge-gap" class="headerlink" title="Bridging the knowledge gap"></a>Bridging the knowledge gap</h3><p>I had <em>never</em> built a Chrome extension before, yet ChatGPT walked me through every step, from project structure to Chrome’s developer mode.</p><h3 id="Enhancing-creativity"><a href="#Enhancing-creativity" class="headerlink" title="Enhancing creativity"></a>Enhancing creativity</h3><p>Because ChatGPT handled the boilerplate, I could focus on the <em>creative</em> parts – UI tweaks, use-case brainstorming, and of course writing this post.</p><h3 id="Potential-challenges"><a href="#Potential-challenges" class="headerlink" title="Potential challenges"></a>Potential challenges</h3><p>Not everything was perfect – for example, the suggested SVG icon needed a redo. Human oversight still matters, and the model will only get better.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This experience felt like pairing with a tireless coworker, iterating together until we were both satisfied. It showed me how AI tools can empower anyone – regardless of background – to create and ship useful software.</p><p>As language models evolve, I can only imagine how they’ll continue to revolutionise software engineering and product development.</p>]]></content>
    
    
    <categories>
      
      <category>ChatGPT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chrome extension</tag>
      
      <tag>ChatGPT</tag>
      
      <tag>no-code</tag>
      
      <tag>polygon-checker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transition to Product Management</title>
    <link href="/2021/09/05/2021-09-05-transition-to-product-management/"/>
    <url>/2021/09/05/2021-09-05-transition-to-product-management/</url>
    
    <content type="html"><![CDATA[<p>TLDR: I was a developer with an entrepreneurial mindset and came to realize I could contribute much more as a product manager.</p><p>Why?</p><p>I’ve been a full-time software developer since 2007 (14 years) and wrote code as a hobby even before that. Throughout my developer career I was constantly not doing “only my job”. I always had side projects. Some of these projects even became a paid products that people many people used and loved.</p><p>And when I was not working on a side-project my focus was on developing as many product features and bring value as much as possible. As time went on, I began to lose interest in improving my development skills and build environment, for example, I preferred adding another customer facing feature over reducing the time it took to build the mobile app. </p><p>I was always interested in who is using our products, why, and how we can increase the value they get from using the product. I wanted to be closer to the business. </p><p>So for my 40th trip around the sun I was given the opportunity to transition from a software developer to a product manager role at Bringg. This was an ideal fit for the company, as I knew most of the business and knew my way around. This will allow me a soft landing in my new role. I will be able to apply my technical knowledge and experience to the product, as well as my understanding of customer and market needs. I’m looking forward to seeing where this opportunity takes me in the future.</p>]]></content>
    
    
    <categories>
      
      <category>personal</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CIDetector with Live Video - UIFacialGestuures</title>
    <link href="/2014/10/23/2014-10-23-cidetector-with-live-video-uifacialgestuures/"/>
    <url>/2014/10/23/2014-10-23-cidetector-with-live-video-uifacialgestuures/</url>
    
    <content type="html"><![CDATA[<p>Making Facial Gestures or, Using CIDetector with Streaming Video</p><p>Since iOS7 Apple introduced new feature to the CIDetector, specifically smile and blinks detection.</p><p>I’ve wondered if i could “feed” it streaming video instead of static image and get make something like a live smile facial gesture be registered as an action on the device.</p><p>Here is a demo video of it:</p><div class="video-container"><iframe src="https://www.youtube.com/embed/cdzPRymOC7o" frameborder="0" loading="lazy" allowfullscreen></iframe></div><span id="more"></span><p>I’ve extracted all the logic into an easy to use facade so it can easily be added in any project.<br>Have a look at the<br>The main issues where:</p><ol><li><p>CIDetector is a slow and takes up a lot of CPU</p></li><li><p>Smartley aggregating the feature detection results from the CIDetector until enough features are considered a registered gestured.</p></li></ol><p>The code and example project: <a href="https://github.com/dannyshmueli/DSFacialGestureDetector">https://github.com/dannyshmueli/DSFacialGestureDetector</a></p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Customized Ellipsis on UILabel</title>
    <link href="/2014/05/30/2014-05-30-customized-ellipsis-on-uilabel/"/>
    <url>/2014/05/30/2014-05-30-customized-ellipsis-on-uilabel/</url>
    
    <content type="html"><![CDATA[<p><em>Ellipsis (plural ellipses) is a series of dots that usually indicates an intentional omission of a word, sentence, or whole section from a text without altering its original meaning.</em><a href="http://www.thefreedictionary.com/ellipsis">1</a></p><p>In UILabel ellipsis ‘…’ show up when text is to long to fit in label frame:</p><p>![alt text](&#x2F;images&#x2F;posts&#x2F;truncated-label-31.5.14.png  &#x3D;400x)</p><p>Currenlty in UILabel there isn’t an easy way to customize the ellipses and change them to something like in Appstore reviews:</p><p>![alt text](&#x2F;images&#x2F;posts&#x2F;custom-ellipsis-on-appstore-30.5.14.png  &#x3D;400x)</p><span id="more"></span><p>###Introducing DSExpandingLabelWithCustomEllipsis:</p><p>Inspired by an answer on <a href="http://stackoverflow.com/a/15118452/207682">Stackoverflow</a> - a) Store the full text for later expanding b) Trim the full text so it will fit in the required number of lines while considering the custom ellipsis. </p><p>DSExpandingLabelWithCustomEllipsis attributes:</p><ol><li>Using attributed text, for really custom ellipses.</li><li>Finds the trimed text length using binary search.</li><li>Does not use deprecated <code>sizeWithFont</code></li><li>Simple to use.</li></ol><p>Usage:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">self</span>.myExpandingLabel.customEllipsisAttributedText = customEllipsis;<br><span class="hljs-keyword">self</span>.myExpandingLabel.attributedText = loremIpsum;<br><span class="hljs-keyword">self</span>.myExpandingLabel.didExpandBlock = ^()&#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;did tap label&quot;</span>);<br>&#125;;<br>[<span class="hljs-keyword">self</span>.myExpandingLabel setTruncatingForNumberOfLines:<span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure><p>Check it out on Github: <a href="https://github.com/dannyshmueli/DSExpandingLabelWithCustomEllipsis">DSExpandingLabelWithCustomEllipsis</a> </p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Storyboard problems and How Tool By Square (codegenutils) Solves Some</title>
    <link href="/2014/02/22/2014-02-22-using-square-codegenutils/"/>
    <url>/2014/02/22/2014-02-22-using-square-codegenutils/</url>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/ios/documentation/general/conceptual/Devpedia-CocoaApp/Storyboard.html">Storyboards</a> are great to use, save time and allows developers to visualise the whole (or part) of app, in terms of screen relationships.</p><p>####Problem: Storyboards fail at runtime, note compile time</p><span id="more"></span><p>Using storyboards means also accessing storyboards created items programmatically. Such as:  </p><ol><li>Segue identifiers.  </li><li>Cell reuse identifiers.  </li><li>View Controllers identifiers.<br>When changing an identifier in storyboard, developer should also change the identifier in the code.<br>This is prone to error.</li></ol><p>####Solution: Auto Generated Constants from Storyboard<br><a href="http://squareup.com/">Square</a> have <a href="http://corner.squareup.com/2014/02/objc-codegenutils.html">recently wrote</a> in <a href="http://corner.squareup.com/">Square Engineering Blog</a> about a new tool they have released: <a href="http://github.com/square/objc-codegenutils">objc-codegenutils</a>. and specifically: <code>objc-identifierconstants</code>.</p><p>This “generates string identifiers into-compiler checked constants”. AKA a file for every storyboard that contains:<br> <code>NSString *const &lt;StoryBoardFileName&gt;MySegueIdentifier</code> or:<br> <code>NSString *const &lt;StoryBoardFileName&gt;MyCellIdentifier</code>.</p><p>Using constants avoid typos.</p><p>####How:</p><ol><li><p>Clone the project at <a href="http://github.com/square/objc-codegenutils">objc-codegenutils</a>.</p></li><li><p>Open the cloned project.</p></li><li><p>Choose <code>identifierconstants</code> as target:<br>![alt text](&#x2F;images&#x2F;posts&#x2F;codegen-22.2.14.png  &#x3D;300x)</p></li><li><p>Build and find the built product:<br>![alt text](&#x2F;images&#x2F;posts&#x2F;show-in-finder-22.2.14.png  &#x3D;300x) </p></li><li><p>Copy  <code>objc-identifierconstants</code> into your project. (I place under  <code>&lt;ProjectRoot&gt;/objc-codegen-utils/</code>).</p></li><li><p>Add it as a run script on every build:</p><pre><code class="hljs"> objc-codegen-utils/objc-identifierconstants -o $&#123;SRCROOT&#125;/Classes/GeneratedIdentifiers/ $&#123;SRCROOT&#125;/Classes/en.lproj/MainStoryboard.storyboard</code></pre></li></ol><p>I output the files into <code>$&#123;SRCROOT&#125;/Classes/GeneratedIdentifiers/</code> and <code>$&#123;SRCROOT&#125;/Classes/en.lproj/MainStoryboard.storyboard</code> is the path to my storyboard file.<br>7. Build your project and add the generated files to the project.<br>8. Replace string identifiers with new constants.</p><p>No more typos.</p>]]></content>
    
    
    <categories>
      
      <category>ios</category>
      
      <category>xcode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>I&#39;m Going to Rails TLV 2014</title>
    <link href="/2014/02/16/2014-02-16-im-going-to-rails-tlv-2014/"/>
    <url>/2014/02/16/2014-02-16-im-going-to-rails-tlv-2014/</url>
    
    <content type="html"><![CDATA[<p>Just paid for the ticket.</p>]]></content>
    
    
    <categories>
      
      <category>rails</category>
      
      <category>tel-aviv</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Co-Founder Equity Caclulator</title>
    <link href="/2014/02/11/2014-02-11-co-founder-equity-caclulator/"/>
    <url>/2014/02/11/2014-02-11-co-founder-equity-caclulator/</url>
    
    <content type="html"><![CDATA[<p>(suggested equity)</p>]]></content>
    
    
    <categories>
      
      <category>startups</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>How I setup this blog- Octorpresse Github.io, Custom Domain, theme</title>
    <link href="/2014/02/10/2014-02-10-how-i-setup-this-blog-octorpress/"/>
    <url>/2014/02/10/2014-02-10-how-i-setup-this-blog-octorpress/</url>
    
    <content type="html"><![CDATA[<p>This blog is:</p><ul><li>Running <a href="http://octopress.org/">Octopress</a> </li><li>Hosted on <a href="http://github.io/">github.io</a> with <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">custom domain options</a></li><li>Setup the DNS entries using <a href="http://namecheap.com/">namecheap</a></li><li>Installed this theme: <a href="https://github.com/sevenadrian/foxslide">foxslide</a></li></ul><p>All for the price of registering the domain at Goaddy.</p><span id="more"></span><ul><li>To install Octopress follow this: <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></li><li>Connect Octopress to github.io: <a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></li><li>To configure namecheap with your top level domain - I use this: <a href="http://davidensinger.com/2013/03/setting-the-dns-for-github-pages-on-namecheap/">Setting the DNS for GitHub Pages on Namecheap</a> by <a href="http://davidensinger.com/">David Ensinger</a>.</li></ul><p>Also useful:</p><ul><li><a href="http://blog.revolunet.com/blog/2013/04/15/octopress-cheatsheet/">Octopress Cheatsheet</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>blogging</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>My Process for updating Octopress Theme</title>
    <link href="/2014/02/08/2014-02-08-my-process-for-updating-octopress-theme/"/>
    <url>/2014/02/08/2014-02-08-my-process-for-updating-octopress-theme/</url>
    
    <content type="html"><![CDATA[<p>TLDR: This is my general process of modifying code from Github (or other) that I use (could be an Octopress theme or a <a href="http://cocoapods.org/">cocoapod</a> or any other open source code one might use), all while maintaining the ability to update and contributing back (sometimes)…</p><span id="more"></span><p>Recently I installed Octopress theme by <a href="http://www.adrianartiles.com/">Adrian Artiles</a>, for this blog.<br>As suggested by Adrian using git submodule, in octopress <code>.theme</code> folder.<br>My first post was link-post (see <a href="http://octopress.org/docs/blogging/linklog/">Link Bloging</a>). When checking out the preview of the blog with the new link post I noticed that the post title did not link to the external-url of the post…  </p><p>Long story short I <a href="http://www.candlerblog.com/2012/01/30/octopress-linked-list/">found</a>  what’s needed to be changed in the theme to make the post title link to external site.</p><p>At this point I do the following:  </p><ol><li><p>Fork the project on Github.</p></li><li><p>Change the submodule origin to the forked repo:  </p><pre><code class="hljs"> $ cd /submodule/path $ git remote set-url origin https://github.com/[your-user]/[forked-repo].git</code></pre></li><li><p>Add the original repo of the fork as upstream:</p><pre><code class="hljs">cd /submodule/path  git remote add upstream https://github.com/[user-forked-from]/[repo-forked-from].git</code></pre></li><li><p>Create a new branch in the submodule with the name of the change (I create a branch for each change that is applied).</p></li><li><p>Apply the fix &#x2F; change.</p></li><li><p>Commit, Push.</p></li><li><p>Pull request back to upstream.</p></li></ol><p>To use all the changes done I sometimes create a <code>beta</code> branch and merge all the changes to there.</p><p>That way future updates are easy to do:</p><ol><li>Pull changes from <code>upstream</code> remote into (submu) <code>master</code> branch.</li><li>Merge changes from <code>master</code> into your branches.</li></ol>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
      <category>octopress</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ObjC - Refactoring Animation Code</title>
    <link href="/2014/02/08/2014-02-08-objc-refactoring-animation-code/"/>
    <url>/2014/02/08/2014-02-08-objc-refactoring-animation-code/</url>
    
    <content type="html"><![CDATA[<p>How to maintain iOS animation code. When to use Core Animations vs UIView Animations.</p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>objective-c</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
